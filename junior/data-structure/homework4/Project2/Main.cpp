#include <iostream>
#include <stdlib.h>

using namespace std;

/**
* 获取子串在主串中第一次出现的起始位置，不存在则返回0
* param s 主串
* param t 子串
* return 返回子串在主串中第一次出现的下标（从1起标），不存在则返回0
*/
int BF(char* s, char* t) {
    int start = 0;                              // 设置主串每次匹配的起始位置
    int i = 0, j = 0;                           // i记录主串某次匹配的位置变动，j记录子串匹配的位置变动
    /*
        当主串下标不为空时说明主串还没匹配完，
        当子串下标不为空时说明子串还没被匹配完过
        当上面两个条件同时满足才执行循环
    */
    while ((s[i] != '\0') && (t[j] != '\0')) {
        /*
            如果在某次匹配中，子串能与主串匹配上就一直往下匹配，
            直到主串到底，或者子串到底
            主串到底说明已经没法匹配了
            子串到底说明找到了子串在主串中的位置
        */
        if (s[i] == t[j]) {
            i++;
            j++;
        }
        /*
            如果某次匹配没有匹配上，就说明主串的这个位置匹配不上，
            匹配的主串起始位置就往下走一位，
            并将记录主串某次匹配的位置更新为主串新的匹配起始位置，
            记录子串匹配的位置初始化为子串的第一个字符位置
        */
        else {
            start++; 
            i = start; 
            j = 0; 
        }
    }

    /*
        当匹配完成后如果子串的下标匹配记录为\0，
        则说明子串匹配成功了，就返回最后这次匹配的主串起始位置+1（方法返回从1起标）。
        如果子串下标匹配记录不为\0，说明是主串的下标匹配记录为\0，
        表明主串已经匹配到最后一个字符了，也没有匹配到子串，就返回0，表示没有找到子串
    */
    if (t[j] == '\0') {
        return start + 1; 
    }
    else { 
        return 0;
    }

}

int main() {
    // 给两个字符指针分配内存，方便存字符串
    char *s = (char*) malloc(1024), * t = (char*)malloc(1024);

    // 输入
    cout << "请输入主串：";
    cin >> s;
    cout << "请输入子串：";
    cin >> t;

    if (int index = BF(s,t)) {
        cout << "子串第一次在主串中出现的下标是：" << index;
    }
    else {
        cout << "没有匹配到子串";
    }

    // 内存释放
    free(s);
    free(t);

	return 0;
}